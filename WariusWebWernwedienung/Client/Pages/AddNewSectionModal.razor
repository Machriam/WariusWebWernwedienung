@using Blazored.Modal;
<div class="col-md-12 row" style="height:500px;width:300px">
    @foreach (var sectionPart in _sections.Where(s => !_sectionsToDelete.Contains(s)))
    {
        <div class="col-md-12 row">
            <label>@(sectionPart.Name)</label>
            <button class="btn btn-danger" @onclick="@(()=>RemoveSection(sectionPart))">X</button>
        </div>
    }
    <label>Sectionname:</label>
    <input class="form-control" @bind-value="SectionInformation.Name" />
    <button class="btn btn-primary"
            disabled="@(_existingSections.Contains(SectionInformation.Name))" @onclick="Close">
        Save Changes
    </button>
</div>
@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;
    [Inject] IDataStorage DataStorage { get; set; } = default!;
    public SectionInformation SectionInformation = new();
    private HashSet<string> _existingSections = new();
    private HashSet<SectionInformation> _sectionsToDelete = new();
    [Parameter] public List<string> FileNames { get; set; } = new();
    private List<SectionInformation> _sections = new();
    protected override async Task OnInitializedAsync()
    {
        await UpdateSections();
    }
    private async Task UpdateSections()
    {
        _sections = (await DataStorage.GetSectionInformation())?.ToList() ?? new();
        _existingSections = _sections.Select(s => s.Name).ToHashSet();
    }
    private void RemoveSection(SectionInformation section)
    {
        _sectionsToDelete.Add(section);
    }
    public async Task Close()
    {
        foreach (var section in _sectionsToDelete) await DataStorage.DeleteSection(section);
        if (!string.IsNullOrWhiteSpace(SectionInformation.Name))
        {
            await DataStorage.UpdateSection(SectionInformation);
        }
        await ModalInstance.CloseAsync(ModalResult.Ok<SectionInformation>(SectionInformation));
    }
}
