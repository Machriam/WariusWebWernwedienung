@using System.Text.Json;
@using WariusWebWernwedienung.Shared;

<div class="d-flex flex-row">
    <div style="flex:auto"></div>
    <button class="btn btn-success" @onclick="AddNewButton">+</button>
</div>

<div class="d-flex flex-column" style="overflow-y:scroll">
    <button @onclick="SendText" style="background-color:darkgrey" class="btn m-2">Send Text</button>
    @foreach (var button in SectionInformation.ButtonInformation)
    {
        <button class="btn @(_removeButtonsOn?"btn-danger":"btn-primary") m-2"
            @onclick="()=>_removeButtonsOn?RemoveButton(button): ExecuteScript(button)">
            @button.Label
        </button>
    }
    <button class="btn btn-danger" @onclick="()=>_removeButtonsOn=!_removeButtonsOn">Remove Buttons</button>
</div>

@code {
    [Inject] private IRemoteControlService RemoteControlService { get; set; } = default!;
    [Inject] private ILocalStorageInterop LocalStorageInterop { get; set; } = default!;
    [Inject] private IModalHelper ModalHelper { get; set; } = default!;
    [Parameter] public SectionInformation SectionInformation { get; set; } = new();
    [Inject] private IDataStorage DataStorage { get; set; } = default!;
    [Inject] private EventBus EventBus { get; set; } = default!;
    private const string LocalStorageButtonInformation = nameof(LocalStorageButtonInformation);
    private bool _removeButtonsOn;
    private List<string> _executableScripts = new();
    protected override async Task OnInitializedAsync()
    {
        _executableScripts = (await RemoteControlService.GetExecutableScripts())?.ToList() ?? new();
    }

    private async Task RemoveButton(ButtonInformation button)
    {
        SectionInformation.ButtonInformation.Remove(button);
        await DataStorage.UpdateSection(SectionInformation);
        StateHasChanged();
        EventBus.OnButtonClicked();
    }
    private async Task AddNewButton()
    {
        var newInformation = await ModalHelper.ShowModal<AddNewButtonModal, ButtonInformation>("New Button", new()
        {
            {nameof(AddNewButtonModal.FileNames),_executableScripts}
        });
        if (newInformation == null || string.IsNullOrWhiteSpace(newInformation.Filename)) return;
        SectionInformation.ButtonInformation.Add(newInformation);
        await DataStorage.UpdateSection(SectionInformation);
        EventBus.OnButtonClicked();
        StateHasChanged();
    }
    private async Task SendText()
    {
        var newInformation = await ModalHelper.ShowModal<SendKeysModal, ButtonInformation>("Send Keys", new()
        {
            {nameof(AddNewButtonModal.FileNames),_executableScripts}
        });
        if (newInformation == null) return;
        await RemoteControlService.SendRemoteControl(new RemoteControlParameter()
            {
                FileName = newInformation.Filename,
                Parameter = newInformation.Parameter
            });
        EventBus.OnButtonClicked();
    }
    private async Task ExecuteScript(ButtonInformation button)
    {
        await RemoteControlService.SendRemoteControl(new RemoteControlParameter()
            {
                FileName = button.Filename,
                Parameter = button.Parameter
            });
        EventBus.OnButtonClicked();
    }
}
