@page "/wernwedienung"
@using System.Text.Json;
@using WariusWebWernwedienung.Shared;

<PageTitle>Counter</PageTitle>

<div class="d-flex flex-row">
    <p class="">Current count: @currentCount</p>
    <div style="flex:auto"></div>
    <button class="btn btn-success" @onclick="AddNewButton">+</button>
</div>

<div class="d-flex flex-column" style="overflow-y:scroll">
    @foreach (var button in _buttons)
    {
        <button class="btn @(_removeButtonsOn?"btn-danger":"btn-primary") m-2"
            @onclick="()=>_removeButtonsOn?RemoveButton(button): ExecuteScript(button)">
            @button.Label
        </button>
    }
    <button class="btn btn-danger" @onclick="()=>_removeButtonsOn=!_removeButtonsOn">Remove Buttons</button>
</div>

@code {
    [Inject] private IRemoteControlService RemoteControlService { get; set; } = default!;
    [Inject] private ILocalStorageInterop LocalStorageInterop { get; set; } = default!;
    [Inject] private IModalHelper ModalHelper { get; set; } = default!;
    [CascadingParameter] private IModalService ModalService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    private const string LocalStorageButtonInformation = nameof(LocalStorageButtonInformation);
    private int currentCount = 0;
    private bool _removeButtonsOn;
    private List<string> _executableScripts = new();
    private List<ButtonInformation> _buttons = new();
    protected override async Task OnInitializedAsync()
    {
        _executableScripts = (await RemoteControlService.GetExecutableScripts())?.ToList() ?? new();
        ModalHelper.InitializeModalService(ModalService, JSRuntime);
        var buttonInformation = await LocalStorageInterop.GetItem(LocalStorageButtonInformation);
        if (buttonInformation == null) return;
        _buttons = JsonSerializer.Deserialize<List<ButtonInformation>>(buttonInformation) ?? new();
    }

    private async Task RemoveButton(ButtonInformation button)
    {
        _buttons.Remove(button);
        await LocalStorageInterop.SetItem(LocalStorageButtonInformation, JsonSerializer.Serialize(_buttons));
        StateHasChanged();
    }
    private async Task AddNewButton()
    {
        var newInformation = await ModalHelper.ShowModal<AddNewButtonModal, ButtonInformation>("New Button", new()
        {
            {nameof(AddNewButtonModal.FileNames),_executableScripts}
        });
        if (newInformation == null || string.IsNullOrWhiteSpace(newInformation.Filename)) return;
        _buttons.Add(newInformation);
        await LocalStorageInterop.SetItem(LocalStorageButtonInformation, JsonSerializer.Serialize(_buttons));
        StateHasChanged();
    }
    private async Task ExecuteScript(ButtonInformation button)
    {
        currentCount++;
        await RemoteControlService.SendRemoteControl(new RemoteControlParameter()
            {
                FileName = button.Filename,
                Parameter = button.Parameter
            });
    }
}
